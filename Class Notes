Scenario based, something bad happened...persistence

Powershell Day 1
Powershell profiles
scripts, all users all hosts
ran when powershell opens

#Powershell Commands#

#Show system info	  Get-ComputerInfo
#Show OS version	  Get-CimInstance -ClassName Win32_OperatingSystem
#Show running processes	  Get-Process
#Show services  	Get-Service
#Show installed   hotfixes	Get-HotFix
#List files in directory	Get-ChildItem
#List local users	  Get-LocalUser
#List local groups	  Get-LocalGroup
#Add a user to a group	  Add-LocalGroupMember -Group "Administrators" -Member "username"
#List all cmdlets	  Get-Command
#Search for commands	  Get-Command *service*
#Get help for a command	  Get-Help Get-Service
#Update help files	  Update-Help

#Usernames and corresponding SIDS
Get-LocalUser | Select-Object Name, SID

#Domain
Get-ADUser -Filter * -Property SID | Select-Object Name, SID


Powershell Profiles

Profile Type	Example Use
All Users, All Hosts	Set proxy or environment vars for all users.
All Users, Current Host	Customize ISE settings for everyone.
Current User, All Hosts	Add personal aliases and functions.
Current User, Current Host	Make your console window blue only for you.

#Can check with Get-Content $Profile

#What to Look For (Defensive Side)
Here’s how to detect abuse:

Check if the profile file exists:

Test-Path $PROFILE
View its contents:

Get-Content $PROFILE
Watch for signs of persistence, such as:

Invoke-WebRequest / iex
Encoded payloads (FromBase64String)
Start-Process, Add-Type, New-Object Net.WebClient
C2 (command and control) references





Windows Registry
Run keys   Run/RunOnce
HKLM and HKU or HKCU


#Powershell
Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" | Select-Object EnableLUA

#CMD
reg query "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v EnableLUA

#View a registry key
#Use Get-Item to look at a registry key (like viewing a folder):
Get-Item "HKLM:\Software\Microsoft\Windows\CurrentVersion"

#List Values Under a Registry Key
Get-ItemProperty "HKLM:\Software\Microsoft\Windows\CurrentVersion"

#Check a Specific Registry Value
(Get-ItemProperty "HKCU:\Control Panel\Desktop").Wallpaper


#Get SID from Service Name or Display Name
Step 1: (Optional) Convert display name to service name
If you only have the display name, convert it first:
- $displayName = "Windows Update"  # Replace with your display name
$serviceName = Get-WmiObject -Class Win32_Service | Where-Object { $_.DisplayName -eq $displayName } | Select-Object -ExpandProperty Name

Step 2: Build the NT SERVICE account name
-$ntAccount = "NT SERVICE\$serviceName"

Step 3: Translate it to a SID
-$sid = (New-Object System.Security.Principal.NTAccount($ntAccount)).Translate([System.Security.Principal.SecurityIdentifier])
$sid.Value



Alternate Data Streams
Obfuscation
Can be used to obfuscate exploit but need someting to run it
Windows:

Dir /R



Linux Essentials
Permissions on files and folders
Something to pay attention to, wanting to change directories but could not due to permissions, no sudo cd but there is sudo ls. File and folder permissions

Find_Evil Persistence
Used htop, saw communcations being sent, looked and saw chant being sent. 
Looked at last comm/bottom of tree to see who was the last to recieve communcation, also saw IP and port number.

sudo find / -type d -name Balogna
   #finds directory named "Balogna"
sudo find / -name *.sh | grep -r ".txt"g
         #searches all .sh (bash scripts) that contain ".txt" inside of it.

ps -elf, systemctl 


#List all active services
systemctl list-units --type=service

or

systemctl list-unit-files --type=service

or find /etc/systemd/system /lib/systemd/system -name '*.service'

#Check the status of a specific service:
systemctl status <sshd>

#List only running services
systemctl --type=service --state=running

service --status-all

#Check what init system you’re using
ps -p 1 -o comm=


Windows Boot Process
Did not dive into BCDedit, don't go down path of topics not discussed in class
Nor DLLInjections
Nor binary analysis

if need to can use strings in Linux and sysinternals on Windows

Linux Boot Process

Run Levels and Run Scripts
Init scripts in 
/etc/init     Used by SysVinit systems (older distros).

              Defines what runs at different runlevels.

              Look for unusual lines like:



/etc/inittab 



/etc/rc.S        Used by SysVinit and older init systems.

                Files like /etc/rc.local, /etc/rc0.d/, /etc/rc1.d/ etc.

                Scripts in these folders run at specific runlevels.

                /etc/rc.local (if executable) is a classic persistence method.

no looking in /sbin/init


Section 7.2
Bash profiles
User startup files (per-user persistence)
Files to check in user home directories:

/etc/enviornmental profiles
/etc/enviornment
/etc/profile
/etc/bash

Also may be
~/.bashrc
~/.bash_profile
~/.profile

#rc.d scripts     check for malicious entries or scripts added manually

#Checklist for PErsistence if needed

/etc/init/	Upstart jobs
/etc/inittab	SysVinit runlevel commands
/etc/rc.local	Script run at boot
/etc/rc*.d/	SysVinit startup scripts
/etc/systemd/system/	systemd service units (modern distros)
/etc/crontab	System-wide scheduled tasks
/var/spool/cron/	User-specific crontabs
~/.bashrc, ~/.profile	User persistence
~/.config/autostart/	Desktop environments (GUI)

Windows Process Validity

#Windows SYSINTERNALS

#command
net use * http://live.sysinternals.com

PROCMON  -   real-time File System, Registry and Process/Thread activity
AUTORUNS  -   shows applications automatically started on during system boot or login as well as the Registry and file system locations for auto-start configurations
PROCEXP  -    task manager and system monitor which collects information on running processes with such features as Hierarchical view of processes, live CPU activity, ability to kill and suspend processes, display DLLs loaded, create process dumps, display handles and much more
TCPView -    show you detailed listings of all TCP and UDP endpoints on your system, including the local and remote addresses and state of TCP connections
PsExec  -  lets you execute processes on other systems, complete with full interactivity for console applications, without having to manually install client software
PsLoggedon - list users that are logged on currently to a system
LogonSessions  -   loggonsessions shows how that user logged on
PsList  -  Analyze Windows processes using PsList on local or remote systems
PsInfo - Gathers key system information from both local and remote systems.
Strings  -  Analyze Windows files using Strings
Handle  -  Analyze Windows handles process using Handle





Scheduled Tasks
-Services may be running or stopped
-Look at triggering mechanism and what it does
-looking if its a verfied process for what it's expected to be
-name is not important

#List all scheduled tasks
schtasks /query /fo LIST /v
PS: Get-ScheduledTask

#List a specific task
schtasks /query /tn "\Microsoft\Windows\Defrag\ScheduledDefrag"
PS: Get-ScheduledTask -TaskName "MyTask" | Get-ScheduledTaskInfo

#Find task created by a specific user
schtasks /query /fo LIST /v | findstr "User:"

#Get tasks and full path
Get-ScheduledTask | Select TaskName, TaskPath, State


Services
-find a bad executable, find what started it, or example svchost, trace parent process


Network Connections
Using a suspicious port, repeating numbers, ascending or descending numbers

UAC
-privilege escalation

Linux Process Validity
-Cron Jobs
-Configuration files 
/var/spool/cron   -contains usernames
/etc/cron.d
/etc/crontab

tools to identify parent processes
-htop or pstree

just becasue it's running bash and something else is above it, may not be bad
if it's something that should be on the machine. not bad


Windows Auditing and Logging
Artifacts - things left behind

Need to know env and what should be running

going to be on a DoD/government computer

Should be running from program files or system32

Since we do not have to use sysinternals, we can leave out Browser Artifacts

Linux Auditing and Logging

Memory Analysis

Active Directory
If needed, module but with 2 machines, not going to use Active Directory

#Preventing a scheduled restart
#Cancel a Scheduled Restart
Shutdown /a

#Disable Automatic Restart from Windows Update (Temporarily)
#Prevents automatic restart if a user is logged in
PS: reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v NoAutoRebootWithLoggedOnUsers /t REG_DWORD /d 1 /f

#Stop a Pending Restart via Services (risky workaround)
#You can stop Windows Update service, which sometimes blocks restarts
net stop wuauserv

#bootcfg, bcdedit (for changing boot options)
#Check bcdedit output for strange boot paths or options


Reset to Default Boot Loader
bcdedit /set {default} path \Windows\System32\winload.efi

#Powershell .dll's
#5.1
System.Management.Automation.dll
Microsoft.PowerShell.Commands.Management.dll
Microsoft.PowerShell.ConsoleHost.dll
Microsoft.PowerShell.Security.dll

#7+
System.Management.Automation.dll
Microsoft.PowerShell.Commands.Utility.dll
pwsh.dll
